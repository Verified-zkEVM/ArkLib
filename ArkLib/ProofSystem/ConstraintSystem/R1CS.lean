/-
Copyright (c) 2024-2025 ArkLib Contributors. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Quang Dao
-/

import ArkLib.Data.Matrix.Basic

/-!
# Rank-1 Constraint System (R1CS)

This file defines the R1CS (Rank-1 Constraint System) relation
- The definition is in terms of `Fin` vectors and matrices. In the future, we may consider more
  efficient representations such as `Vector` and `Vector m (Vector n Œ±)`.
- We define padding (on the right) for R1CS instances, and show that padding preserves the R1CS
  relation.
-/

namespace R1CS

open Matrix

variable (R : Type*) [CommSemiring R]

inductive MatrixIdx where | A | B | C deriving Inhabited, DecidableEq

structure Size where
  m : ‚Ñï -- number of columns
  n : ‚Ñï -- number of rows
  n_w : ‚Ñï -- number of witness variables
  n_w_le_n : n_w ‚â§ n := by omega -- Number of witness variables must be at most the number of rows

attribute [simp] Size.n_w_le_n

/-- Number of public `ùï©` variables -/
abbrev Size.n_x (sz : Size) : ‚Ñï := sz.n - sz.n_w

@[reducible]
def Statement (sz : Size) := Fin sz.n_x ‚Üí R

@[reducible]
def OracleStatement (sz : Size) := fun _ : MatrixIdx => Matrix (Fin sz.m) (Fin sz.n) R

@[reducible]
def Witness (sz : Size) := Fin sz.n_w ‚Üí R

@[reducible]
-- The R1CS relation
def relation (sz : Size) :
    (Fin sz.n_x ‚Üí R) ‚Üí -- public input `x`
    (MatrixIdx ‚Üí Matrix (Fin sz.m) (Fin sz.n) R) ‚Üí -- matrices `A`, `B`, `C` as oracle inputs
    (Fin sz.n_w ‚Üí R) ‚Üí -- witness input `w`
    Prop :=
  fun stmt matrices wit =>
    let z : Fin sz.n ‚Üí R := Fin.append stmt wit ‚àò Fin.cast (by simp)
    (matrices .A *·µ• z) * (matrices .B *·µ• z) = (matrices .C *·µ• z)

/-- Pad an R1CS instance (on the right) from `sz‚ÇÅ` to `sz‚ÇÇ` with zeros.

Note that this results in truncation if the second size is smaller than the first one. -/
def pad (sz‚ÇÅ sz‚ÇÇ : Size)
    (stmt : Statement R sz‚ÇÅ)
    (matrices : MatrixIdx ‚Üí Matrix (Fin sz‚ÇÅ.m) (Fin sz‚ÇÅ.n) R)
    (wit : Witness R sz‚ÇÅ) :
    Statement R sz‚ÇÇ √ó (MatrixIdx ‚Üí Matrix (Fin sz‚ÇÇ.m) (Fin sz‚ÇÇ.n) R) √ó Witness R sz‚ÇÇ :=
  (Fin.rightpad sz‚ÇÇ.n_x 0 stmt,
    fun idx => Matrix.rightpad sz‚ÇÇ.m sz‚ÇÇ.n 0 (matrices idx),
    Fin.rightpad sz‚ÇÇ.n_w 0 wit)

-- padding preserves the R1CS relation
theorem pad_preserves_relation (sz‚ÇÅ sz‚ÇÇ : Size)
    (stmt : Statement R sz‚ÇÅ)
    (matrices : MatrixIdx ‚Üí Matrix (Fin sz‚ÇÅ.m) (Fin sz‚ÇÅ.n) R)
    (wit : Witness R sz‚ÇÅ) :
    relation R sz‚ÇÅ stmt matrices wit =
      let (stmt', matrices', wit') := pad R sz‚ÇÅ sz‚ÇÇ stmt matrices wit
      relation R sz‚ÇÇ stmt' matrices' wit' := by
  simp [pad, relation, rightpad]
  sorry

end R1CS
